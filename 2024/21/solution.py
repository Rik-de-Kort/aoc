from functools import cache
from itertools import pairwise
from pathlib import Path

folder = Path(__file__).parent

with open(folder / 'input.txt') as handle:
    codes = [line.strip() for line in handle.readlines()]


@cache
def get_paths(start: str, end: str) -> list[str]:
    if start in '0123456789' or end in '0123456789':
        return [r + 'A' for r in
                {'A': {'A': [''], '0': ['<'],
                       '1': ['^<<'], '2': ['^<', '<^'], '3': ['^'],
                       '4': ['^^<<'], '5': ['^^<', '<^^'], '6': ['^^'],
                       '7': ['^^^<<'], '8': ['^^^<', '<^^^'], '9': ['^^^']},
                 '0': {'A': ['>'], '0': [''],
                       '1': ['^<'], '2': ['^'], '3': ['^>', '>^'],
                       '4': ['^^<'], '5': ['^^'], '6': ['^^>', '>^^'],
                       '7': ['^^^<'], '8': ['^^^'], '9': ['^^^>', '>^^^']},
                 '1': {'A': ['>>v'], '0': ['>v'],
                       '1': [''], '2': ['>'], '3': ['>>'],
                       '4': ['^'], '5': ['^>', '>^'], '6': ['^>>', '>>^'],
                       '7': ['^^'], '8': ['^^>', '>^^'], '9': ['^^>>', '>>^^']},
                 '2': {'A': ['>v', 'v>'], '0': ['v'],
                       '1': ['<'], '2': [''], '3': ['>'],
                       '4': ['^<', '<^'], '5': ['^'], '6': ['^>', '>^'],
                       '7': ['^^<', '<^^'], '8': ['^^'], '9': ['^^>', '>^^']},
                 '3': {'A': ['v'], '0': ['<v', 'v<'],
                       '1': ['<<'], '2': ['<'], '3': [''],
                       '4': ['^<<', '<<^'], '5': ['^<', '<^'], '6': ['^'],
                       '7': ['^^<<', '<<^^'], '8': ['^^<', '<^^'], '9': ['^^']},
                 '4': {'A': ['>>vv'], '0': ['>vv'],
                       '1': ['v'], '2': ['>v', 'v>'], '3': ['>>v', 'v>>'],
                       '4': [''], '5': ['>'], '6': ['>>'],
                       '7': ['^'], '8': ['^>', '>^'], '9': ['^>>', '>>^']},
                 '5': {'A': ['>vv', 'vv>'], '0': ['vv'],
                       '1': ['<v', 'v<'], '2': ['v'], '3': ['>v', 'v>'],
                       '4': ['<'], '5': [''], '6': ['>'],
                       '7': ['^<', '<^'], '8': ['^'], '9': ['^>', '>^']},
                 '6': {'A': ['vv'], '0': ['<vv'],
                       '1': ['<<v', 'v<<'], '2': ['<v', 'v<'], '3': ['v'],
                       '4': ['<<'], '5': ['<'], '6': [''],
                       '7': ['^<<', '<<^'], '8': ['^<', '<^'], '9': ['^']},
                 '7': {'A': ['>>vvv'], '0': ['>vvv'],
                       '1': ['vv'], '2': ['>vv', 'vv>'], '3': ['>>vv', 'vv>>'],
                       '4': ['v'], '5': ['>v', 'v>'], '6': ['>>v', 'v>>'],
                       '7': [''], '8': ['>'], '9': ['>>']},
                 '8': {'A': ['>vvv', 'vvv>'], '0': ['vvv'],
                       '1': ['<vv', 'vv<'], '2': ['vv'], '3': ['>vv', 'vv>'],
                       '4': ['<v', 'v<'], '5': ['v'], '6': ['>v', 'v>'],
                       '7': ['<'], '8': [''], '9': ['>']},
                 '9': {'A': ['vvv'], '0': ['<vvv', 'vvv<'],
                       '1': ['<<vv', 'vv<<'], '2': ['<vv', 'vv<'], '3': ['vv'],
                       '4': ['<<v', 'v<<'], '5': ['<v', 'v<'], '6': ['v'],
                       '7': ['<<'], '8': ['<'], '9': ['']}}[start][end]]
    else:
        return [r + 'A' for r in {
            'A': {'>': ['v'], '^': ['<'], 'v': ['<v', 'v<'], '<': ['v<<'], 'A': ['']},
            '>': {'>': [''], '^': ['^<', '<^'], 'v': ['<'], '<': ['<<'], 'A': ['^']},
            '^': {'>': ['>v', 'v>'], '^': [''], 'v': ['v'], '<': ['v<'], 'A': ['>']},
            'v': {'>': ['>'], '^': ['^'], 'v': [''], '<': ['<'], 'A': ['>^', '^>']},
            '<': {'>': ['>>'], '^': ['>^'], 'v': ['>'], '<': [''], 'A': ['>>^']},
        }[start][end]]


@cache
def get_route_len(path: str, n_layers: int = 3) -> int:
    if n_layers == 0:
        return len(path)
    result = 0
    for from_key, to_key in pairwise('A' + path):
        result += min(get_route_len(p, n_layers - 1) for p in get_paths(from_key, to_key))
    return result


print(sum(get_route_len(code, 3) * int(code[:-1]) for code in codes))
print(sum(get_route_len(code, 26) * int(code[:-1]) for code in codes))


def sim(presses, next_map):
    result = []
    position = 'A'
    for press in presses:
        if press == 'A':
            result.append(position)
        else:
            position = next_map[position][press]
    return result


simd = lambda presses: sim(presses, {
    'A': {'<': '^', 'v': '>'},
    '>': {'^': 'A', '<': 'v'},
    'v': {'^': '^', '<': '<', '>': '>'},
    '<': {'^': ' ', '>': 'v'},
    '^': {'<': ' ', 'v': 'v', '>': 'A'},
    ' ': {'v': '<', '>': '^'},
})

simn = lambda presses: sim(presses, {
    'A': {'^': '3', '<': '0'},
    '0': {'<': ' ', '^': '2', '>': 'A'},
    ' ': {'^': '1', '>': '0'},
    '3': {'<': '2', '^': '6', 'v': 'A'},
    '2': {'<': '1', '^': '5', '>': '3', 'v': '0'},
    '1': {'^': '4', '>': '2', 'v': ' '},
    '6': {'<': '5', '^': '9', 'v': '3'},
    '5': {'<': '4', '^': '8', '>': '6', 'v': '2'},
    '4': {'^': '7', '>': '5', 'v': '1'},
    '9': {'<': '8', 'v': '6'},
    '8': {'<': '7', '>': '9', 'v': '5'},
    '7': {'>': '8', 'v': '4'},
})

# print(''.join(simn(simd(simd('<v<A>>^A<vA<A>>^AAvAA<^A>A<v<A>>^AAvA^A<vA>^AA<A>A<v<A>A>^AAAvA<^A>A')))))
